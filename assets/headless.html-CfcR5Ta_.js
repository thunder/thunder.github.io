import{_ as n,c as a,a as e,o as p}from"./app-BKU_geH9.js";const t={};function l(i,s){return p(),a("div",null,s[0]||(s[0]=[e(`<h1 id="headless-api" tabindex="-1"><a class="header-anchor" href="#headless-api"><span>Headless API</span></a></h1><h2 id="introduction" tabindex="-1"><a class="header-anchor" href="#introduction"><span>Introduction</span></a></h2><p>The thunder_gqls module provides a GraphQL API schema and implementation for Thunder based on the Drupal GraphQL module version 4. Version 4 of the GraphQL module does not provide an out-of-the-box API for Drupal, as previous versions did. Instead, it provides the ability to define a schema independent of the underlying Drupal installation, and utilities to map fields defined in that schema to data from Drupal.</p><p>To get most of this documentation, you should have a basic understanding of what GraphQL is, and how to do requests against GraphQL endpoints. A good starting point for this is the official <a href="https://graphql.org/learn/" target="_blank" rel="noopener noreferrer">GraphQl documentation</a>.</p><h2 id="motivation-to-go-with-graphql-4" tabindex="-1"><a class="header-anchor" href="#motivation-to-go-with-graphql-4"><span>Motivation to go with GraphQL 4</span></a></h2><p>Drupal core provides already a turn-key implementation for JSON-API, which basically just needs to be enabled and configured, and it is good to go. Similarly, version 3 of the GraphQL module is as quickly usable. Both modules expose all data structures from Drupal as they are.</p><p>So why did we manually implement an API? While it is very convenient to have schemas automatically created, it also leads to an API that is very close to the structure of Drupal. A consumer would have to know the relationships of entities within Drupal. Especially when working with paragraphs and media entities, you would have to be aware of the entity references to get to the actual data. For example, we use media entities for images in paragraphs. The referencing goes unconventionally deep in this case: If you wanted to get the src attribute of an image in such a paragraph, you would have to dereference Article =&gt; Paragraph =&gt; Media Entity =&gt; File Entity (src).</p><p>Another pain point is, that field names are automatically created. This leads to two separate problems: First, field names are awkward and again very Drupal specific. In GraphQL 3 we have entityUuid instead of uuid and fieldMyField instead of just myField. Second, since field names are automatically generated out of the machine name, the API would change, as soon as you change the machine name. This sounds not very likely, and for actual fields it should not happen, but sometimes even plugin names are used to create the schema, and plugins could be exchanged (we had an example of a views-plugin, that was exchanged).</p><p>Finally, routing with those automated APIs is very often a process that requires two requests, instead of one. Usually you just have some URL string, that could be a route to a node, a user, a term or any other entity. To get the actual data, you will have to do a route query first, to get the information on what kind of entity you are looking at (plus its ID), and then you would have to do a specific node, term or user query to get the actual page.</p><h2 id="basic-ideas" tabindex="-1"><a class="header-anchor" href="#basic-ideas"><span>Basic Ideas</span></a></h2><p>We introduce three main interfaces for which interfaces covering all main data types used in Thunder.</p><ol><li>Page</li><li>Media</li><li>Paragraph</li></ol><p>The Page interface is for all Drupal entities that have a URL, in Thunder that could be nodes, terms, users and similar. This gives us the possibility to request a page from a route without knowing if it is an article or a channel for example.</p><p>The Media interface is for all media entities, and the Paragraph interface for all paragraph entities.</p><p>As described above, we try to minimize references and keep fields as flat as possible - especially if the references are very Drupal specific. Also, Drupal specific field prefixes should be avoided, they make no sense for the frontend.</p><p>One example would be the Image type, which is implementing the Media interface. In Drupal, media entity fields are distributed between several entities, because the file entity does provide the basic file information, and the media entity adds more data fields to that, while referencing a file. Directly translated to a GraphQL API it would look similar to:</p><div class="language-graphql line-numbers-mode" data-highlighter="prismjs" data-ext="graphql"><pre><code class="language-graphql"><span class="line"><span class="token keyword">type</span> <span class="token class-name">MediaImage</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token attr-name">entityLabel</span><span class="token punctuation">:</span> <span class="token scalar">String</span></span>
<span class="line">  <span class="token attr-name">fieldDescription</span><span class="token punctuation">:</span> <span class="token scalar">String</span></span>
<span class="line">  <span class="token attr-name">fieldImage</span><span class="token punctuation">:</span> <span class="token class-name">Image</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">Image</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token attr-name">src</span><span class="token punctuation">:</span> <span class="token scalar">String</span></span>
<span class="line">  <span class="token attr-name">alt</span><span class="token punctuation">:</span> <span class="token scalar">String</span></span>
<span class="line">  <span class="token attr-name">width</span><span class="token punctuation">:</span> <span class="token scalar">Int</span></span>
<span class="line">  <span class="token attr-name">height</span><span class="token punctuation">:</span> <span class="token scalar">Int</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>When you think about images as a frontend developer, you might expect datastructures similar to the following:</p><div class="language-graphql line-numbers-mode" data-highlighter="prismjs" data-ext="graphql"><pre><code class="language-graphql"><span class="line"><span class="token keyword">type</span> <span class="token class-name">MediaImage</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token attr-name">name</span><span class="token punctuation">:</span> <span class="token scalar">String</span></span>
<span class="line">  <span class="token attr-name">description</span><span class="token punctuation">:</span> <span class="token scalar">String</span></span>
<span class="line">  <span class="token attr-name">src</span><span class="token punctuation">:</span> <span class="token scalar">String</span></span>
<span class="line">  <span class="token attr-name">alt</span><span class="token punctuation">:</span> <span class="token scalar">String</span></span>
<span class="line">  <span class="token attr-name">width</span><span class="token punctuation">:</span> <span class="token scalar">Int</span></span>
<span class="line">  <span class="token attr-name">height</span><span class="token punctuation">:</span> <span class="token scalar">Int</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This is cleaner and does not expose internal Drupal structures and naming.</p><h2 id="usage" tabindex="-1"><a class="header-anchor" href="#usage"><span>Usage</span></a></h2><h3 id="install" tabindex="-1"><a class="header-anchor" href="#install"><span>Install</span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line">drush en thunder_gqls</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="routing" tabindex="-1"><a class="header-anchor" href="#routing"><span>Routing</span></a></h3><p>The starting point for most requests will be a URL. Usually, you cannot know what kind of content you will find behind that URL, meaning, which fields you would be able to request. We have simplified this in the Thunder GraphQL schema by introducing the page() request, which internally routes the URL to the correct entity and returns the entity or entity bundle as a Page interface. Multiple page types can then be queried with the &quot;... on Type&quot; construct.</p><p>Let&#39;s take a look at some examples.</p><h3 id="pages-query" tabindex="-1"><a class="header-anchor" href="#pages-query"><span>Pages query</span></a></h3><p>All examples can be tested in the GraphQL explorer (admin/config/graphql/servers/manage/thunder_graphql/explorer). The explorer will also give you a nice autocomplete, and show you all currently available fields.</p><h4 id="basic-example" tabindex="-1"><a class="header-anchor" href="#basic-example"><span>Basic example</span></a></h4><p>First a basic example for a page query. All we know so far is that the path is &quot;/example-page&quot;. So, how do we get the content?</p><div class="language-graphql line-numbers-mode" data-highlighter="prismjs" data-ext="graphql"><pre><code class="language-graphql"><span class="line"><span class="token keyword">query</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property-query">page</span><span class="token punctuation">(</span><span class="token attr-name">path</span><span class="token punctuation">:</span> <span class="token string">&quot;/example-page&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">name</span></span>
<span class="line">    <span class="token operator">...</span> <span class="token keyword">on</span> <span class="token class-name">User</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token property">mail</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token operator">...</span> <span class="token keyword">on</span> <span class="token class-name">Channel</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token object">parent</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token property">name</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token operator">...</span> <span class="token keyword">on</span> <span class="token class-name">Article</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token property">seoTitle</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This will return whatever it finds behind /example-page, and depending on whether it is a user page, a term page or article node, it will contain the requested fields.</p><h4 id="query-parameter" tabindex="-1"><a class="header-anchor" href="#query-parameter"><span>Query parameter</span></a></h4><p>To simplify request, hard coded strings as the &quot;path&quot; in the previous example can be moved to <a href="https://graphql.org/learn/queries/#variables" target="_blank" rel="noopener noreferrer">query variables</a>.</p><p>For this we slightly change the query to:</p><div class="language-graphql line-numbers-mode" data-highlighter="prismjs" data-ext="graphql"><pre><code class="language-graphql"><span class="line"><span class="token keyword">query</span><span class="token punctuation">(</span><span class="token variable">$path</span><span class="token punctuation">:</span> <span class="token scalar">String</span><span class="token operator">!</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property-query">page</span><span class="token punctuation">(</span><span class="token attr-name">path</span><span class="token punctuation">:</span> <span class="token variable">$path</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">name</span></span>
<span class="line">    <span class="token comment"># Add your fields</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Then we add the $path variable with a json string like this:</p><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json"><pre><code class="language-json"><span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">&quot;path&quot;</span><span class="token operator">:</span> <span class="token string">&quot;/example-page&quot;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This variable can be added in the GraphQL explorer in the corresponding input field. All following examples will assume a variable definition like this.</p><h4 id="paragraphs-example" tabindex="-1"><a class="header-anchor" href="#paragraphs-example"><span>Paragraphs example</span></a></h4><p>Articles and taxonomy terms contain paragraph fields in Thunder, the following example shows how to request paragraphs&#39; content.</p><div class="language-graphql line-numbers-mode" data-highlighter="prismjs" data-ext="graphql"><pre><code class="language-graphql"><span class="line"><span class="token keyword">query</span><span class="token punctuation">(</span><span class="token variable">$path</span><span class="token punctuation">:</span> <span class="token scalar">String</span><span class="token operator">!</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property-query">page</span><span class="token punctuation">(</span><span class="token attr-name">path</span><span class="token punctuation">:</span> <span class="token variable">$path</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">name</span></span>
<span class="line">    <span class="token operator">...</span> <span class="token keyword">on</span> <span class="token class-name">Article</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token property">seoTitle</span></span>
<span class="line">      <span class="token object">content</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token operator">...</span> <span class="token keyword">on</span> <span class="token class-name">ParagraphPinterest</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token property">url</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token operator">...</span> <span class="token keyword">on</span> <span class="token class-name">ParagraphText</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token property">text</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>As you can see, the paragraphs are located in the content field. Different paragraphs have different fields, so we again use the &quot;... on&quot; syntax to request the correct ones. In the ParagraphPinterest example, the URL is directly located on the paragraphs&#39; level, and not inside the entity_reference field, where it can be found in the Drupal schema. This is an example on how we try to simplify and hide Drupal specific implementations.</p><h3 id="breadcrumb" tabindex="-1"><a class="header-anchor" href="#breadcrumb"><span>Breadcrumb</span></a></h3><p>The Drupal breadcrumb for a given path can be retrieved with this query:</p><div class="language-graphql line-numbers-mode" data-highlighter="prismjs" data-ext="graphql"><pre><code class="language-graphql"><span class="line"><span class="token keyword">query</span><span class="token punctuation">(</span><span class="token variable">$path</span><span class="token punctuation">:</span> <span class="token scalar">String</span><span class="token operator">!</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property-query">breadcrumb</span><span class="token punctuation">(</span><span class="token attr-name">path</span><span class="token punctuation">:</span> <span class="token variable">$path</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">url</span></span>
<span class="line">    <span class="token property">title</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="combined-queries" tabindex="-1"><a class="header-anchor" href="#combined-queries"><span>Combined queries</span></a></h3><p>You can submit multiple queries with one request. EAn example query for both breadcrumb and page for the same path would be:</p><div class="language-graphql line-numbers-mode" data-highlighter="prismjs" data-ext="graphql"><pre><code class="language-graphql"><span class="line"><span class="token keyword">query</span><span class="token punctuation">(</span><span class="token variable">$path</span><span class="token punctuation">:</span> <span class="token scalar">String</span><span class="token operator">!</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property-query">breadcrumb</span><span class="token punctuation">(</span><span class="token attr-name">path</span><span class="token punctuation">:</span> <span class="token variable">$path</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">url</span></span>
<span class="line">    <span class="token property">title</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token property-query">page</span><span class="token punctuation">(</span><span class="token attr-name">path</span><span class="token punctuation">:</span> <span class="token variable">$path</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">name</span></span>
<span class="line">    <span class="token comment"># Add your fields</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="entity-lists" tabindex="-1"><a class="header-anchor" href="#entity-lists"><span>Entity lists</span></a></h3><p>Some fields contain lists of entities, an example are the article lists for taxonomy terms. Those fields have parameters for offset and limit. The result will contain a list of entities, and the number of total items for that list. For example the channel page has a list of articles within that channel:</p><div class="language-graphql line-numbers-mode" data-highlighter="prismjs" data-ext="graphql"><pre><code class="language-graphql"><span class="line"><span class="token keyword">query</span><span class="token punctuation">(</span><span class="token variable">$path</span><span class="token punctuation">:</span> <span class="token scalar">String</span><span class="token operator">!</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property-query">page</span><span class="token punctuation">(</span><span class="token attr-name">path</span><span class="token punctuation">:</span> <span class="token variable">$path</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">name</span></span>
<span class="line">    <span class="token operator">...</span> <span class="token keyword">on</span> <span class="token class-name">Channel</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token property-query">articles</span><span class="token punctuation">(</span><span class="token attr-name">offset</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token attr-name">limit</span><span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token property">total</span></span>
<span class="line">        <span class="token object">items</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token property">name</span></span>
<span class="line">          <span class="token property">url</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="menu" tabindex="-1"><a class="header-anchor" href="#menu"><span>Menu</span></a></h3><p>Drupal&#39;s menus are queried as well. To get the main menu for a given path, you can send this query:</p><div class="language-graphql line-numbers-mode" data-highlighter="prismjs" data-ext="graphql"><pre><code class="language-graphql"><span class="line"><span class="token keyword">query</span><span class="token punctuation">(</span><span class="token variable">$path</span><span class="token punctuation">:</span> <span class="token scalar">String</span><span class="token operator">!</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property-query">menu</span><span class="token punctuation">(</span><span class="token attr-name">id</span><span class="token punctuation">:</span> <span class="token description string">&quot;<span class="token language-markdown">main</span>&quot;</span> <span class="token attr-name">path</span><span class="token punctuation">:</span> <span class="token variable">$path</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">name</span></span>
<span class="line">    <span class="token property">id</span></span>
<span class="line">    <span class="token object">items</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token property">title</span></span>
<span class="line">      <span class="token property">url</span></span>
<span class="line">      <span class="token property">inActiveTrail</span></span>
<span class="line">      <span class="token object">children</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token property">title</span></span>
<span class="line">        <span class="token property">url</span></span>
<span class="line">        <span class="token property">inActiveTrail</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The inActiveTrail field tells you, which menu entry represents the current path.</p><p>To retrieve multiple menus with one request, you can use <a href="https://graphql.org/learn/queries/#aliases" target="_blank" rel="noopener noreferrer">GraphQL aliases</a>:</p><div class="language-graphql line-numbers-mode" data-highlighter="prismjs" data-ext="graphql"><pre><code class="language-graphql"><span class="line"><span class="token keyword">query</span><span class="token punctuation">(</span><span class="token variable">$path</span><span class="token punctuation">:</span> <span class="token scalar">String</span><span class="token operator">!</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token attr-name">mainMenu</span><span class="token punctuation">:</span> <span class="token property-query">menu</span><span class="token punctuation">(</span><span class="token attr-name">id</span><span class="token punctuation">:</span> <span class="token description string">&quot;<span class="token language-markdown">main</span>&quot;</span> <span class="token attr-name">path</span><span class="token punctuation">:</span> <span class="token variable">$path</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">name</span></span>
<span class="line">    <span class="token property">id</span></span>
<span class="line">    <span class="token object">items</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token property">title</span></span>
<span class="line">      <span class="token property">url</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token attr-name">footerMenu</span><span class="token punctuation">:</span> <span class="token property-query">menu</span><span class="token punctuation">(</span><span class="token attr-name">id</span><span class="token punctuation">:</span> <span class="token description string">&quot;<span class="token language-markdown">footer</span>&quot;</span> <span class="token attr-name">path</span><span class="token punctuation">:</span> <span class="token variable">$path</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">name</span></span>
<span class="line">    <span class="token property">id</span></span>
<span class="line">    <span class="token object">items</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token property">title</span></span>
<span class="line">      <span class="token property">url</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="extending" tabindex="-1"><a class="header-anchor" href="#extending"><span>Extending</span></a></h2><p>The graphql module has an extension mechanism, called composable schema, that can be used in your projects to extend the Thunder schema with your custom types. We added some base classes and helper methods to simplify that work. The basic idea of the composable schema is described in the <a href="https://drupal-graphql.gitbook.io/graphql/v/8.x-4.x/advanced/composable-schemas" target="_blank" rel="noopener noreferrer">GraphQl Module documentation</a> As described in the documentation, you will need three files to extend the schema: Two schema files in the graphql folder of your module:</p><ul><li>your_schema_name.base.graphqls</li><li>your_schema_name.extension.graphqls</li></ul><p>And a PHP class file in src/Plugin/GraphQL/SchemaExtension</p><ul><li>YourSchemaNameSchemaExtension.php</li></ul><p>You will find examples for that in the thunder_gqls module, for all the schema extension we provide.</p><p>Let&#39;s do some examples: We will extend the Thunder schema with our own types. To do so, we first create a new custom module called myschema:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line">drush generate module <span class="token parameter variable">--answers</span><span class="token operator">=</span><span class="token string">&#39;{&quot;name&quot;: &quot;My Schema&quot;, &quot;machine_name&quot;: &quot;myschema&quot;, &quot;install_file&quot;: false, &quot;libraries.yml&quot;: false, &quot;permissions.yml&quot;: false, &quot;event_subscriber&quot;: false, &quot;block_plugin&quot;: false, &quot;controller&quot;: false, &quot;settings_form&quot;: false}&#39;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>This will create a barebone module called myschema in the modules folder. To continue working on your extension go ahead and create a new folder called graphql and put two empty files in it called myschema.base.graphqls and myschema.extension.graphqls in it. Now create another empty file called MySchemaSchemaExtension.php in the src/Plugin/GraphQL/SchemaExtension folder.</p><p>Your modules&#39; file structure should be similar to this now:</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">+-- myschema.info.yml</span>
<span class="line">+-- myschema.module</span>
<span class="line">+-- graphql</span>
<span class="line">|   +-- myschema.base.graphqls</span>
<span class="line">|   +-- myschema.extension.graphqls</span>
<span class="line">+-- src</span>
<span class="line">    +-- Plugin</span>
<span class="line">        +-- GraphQL</span>
<span class="line">            +-- SchemaExtension</span>
<span class="line">                +-- MySchemaSchemaExtension.php</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The content of MySchemaSchemaExtension.php should be:</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php"><pre><code class="language-php"><span class="line"><span class="token keyword">namespace</span> <span class="token package">Drupal<span class="token punctuation">\\</span>myschema<span class="token punctuation">\\</span>Plugin<span class="token punctuation">\\</span>GraphQL<span class="token punctuation">\\</span>SchemaExtension</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">use</span> <span class="token package">Drupal<span class="token punctuation">\\</span>graphql<span class="token punctuation">\\</span>GraphQL<span class="token punctuation">\\</span>ResolverRegistryInterface</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">use</span> <span class="token package">Drupal<span class="token punctuation">\\</span>thunder_gqls<span class="token punctuation">\\</span>Plugin<span class="token punctuation">\\</span>GraphQL<span class="token punctuation">\\</span>SchemaExtension<span class="token punctuation">\\</span>ThunderSchemaExtensionPluginBase</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * My schema extension.</span>
<span class="line"> *</span>
<span class="line"> * @SchemaExtension(</span>
<span class="line"> *   id = &quot;myschema&quot;,</span>
<span class="line"> *   name = &quot;My schema extension&quot;,</span>
<span class="line"> *   description = &quot;Adds my schema.&quot;,</span>
<span class="line"> *   schema = &quot;thunder&quot;</span>
<span class="line"> * )</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name-definition class-name">MySchemaExtension</span> <span class="token keyword">extends</span> <span class="token class-name">ThunderSchemaExtensionPluginBase</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>When you enable the module, your (currently empty) schema extension will be added to the list of available schema extensions. You will now be able to find and enable it on the admin page admin/config/graphql/servers/manage/thunder_graphql</p><h3 id="add-new-type" tabindex="-1"><a class="header-anchor" href="#add-new-type"><span>Add new type</span></a></h3><p>A common task will be to add a new data type. To do so, you will have to add a new type definition in myschema.base.graphqls. Say, you have added a new content type. Your myschema.base.graphqls should look like this now:</p><div class="language-graphql line-numbers-mode" data-highlighter="prismjs" data-ext="graphql"><pre><code class="language-graphql"><span class="line"><span class="token keyword">type</span> <span class="token class-name">MyContentType</span> <span class="token keyword">implements</span> <span class="token class-name">Page</span> <span class="token operator">&amp;</span> <span class="token class-name">Entity</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token attr-name">id</span><span class="token punctuation">:</span> <span class="token scalar">Int</span><span class="token operator">!</span></span>
<span class="line">  <span class="token attr-name">uuid</span><span class="token punctuation">:</span> <span class="token scalar">String</span><span class="token operator">!</span></span>
<span class="line">  <span class="token attr-name">entity</span><span class="token punctuation">:</span> <span class="token scalar">String</span><span class="token operator">!</span></span>
<span class="line">  <span class="token attr-name">language</span><span class="token punctuation">:</span> <span class="token scalar">String</span></span>
<span class="line">  <span class="token attr-name">name</span><span class="token punctuation">:</span> <span class="token scalar">String</span><span class="token operator">!</span></span>
<span class="line">  <span class="token attr-name">url</span><span class="token punctuation">:</span> <span class="token scalar">String</span><span class="token operator">!</span></span>
<span class="line">  <span class="token attr-name">entityLinks</span><span class="token punctuation">:</span> <span class="token class-name">EntityLinks</span></span>
<span class="line">  <span class="token attr-name">published</span><span class="token punctuation">:</span> <span class="token scalar">Boolean</span><span class="token operator">!</span></span>
<span class="line">  <span class="token attr-name">changed</span><span class="token punctuation">:</span> <span class="token scalar">String</span><span class="token operator">!</span></span>
<span class="line">  <span class="token attr-name">myCustomField</span><span class="token punctuation">:</span> <span class="token scalar">String</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This declares the fields, that will be available through the API. Since it is a node content type, it will have a URL and should implement the Page interface. This makes it possible to be requested with the page() query.</p><p>We have implemented an automatic type resolver for Page types, that creates a GraphQL type from bundle names. It CamelCases the words separated by underscores and then removes the underscore. If you create a node content type - or taxonomy vocabulary - called my_content_type, we will automatically create the MyContentType GraphQL type for you.</p><p>The first 9 fields, from id to metatags, are mandatory fields from the Page interface, they will be taken care of by calling <code>resolvePageInterfaceFields()</code> (see example below). The &quot;mycustomfield&quot; field is a custom field, which we do not know about, so you would have to implement producers for it by yourself. This is done in the MySchemaSchemaExtension.php file.</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php"><pre><code class="language-php"><span class="line"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span></span>
<span class="line"><span class="token keyword">namespace</span> <span class="token package">Drupal<span class="token punctuation">\\</span>myschema<span class="token punctuation">\\</span>Plugin<span class="token punctuation">\\</span>GraphQL<span class="token punctuation">\\</span>SchemaExtension</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">use</span> <span class="token package">Drupal<span class="token punctuation">\\</span>graphql<span class="token punctuation">\\</span>GraphQL<span class="token punctuation">\\</span>ResolverRegistryInterface</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">use</span> <span class="token package">Drupal<span class="token punctuation">\\</span>thunder_gqls<span class="token punctuation">\\</span>Plugin<span class="token punctuation">\\</span>GraphQL<span class="token punctuation">\\</span>SchemaExtension<span class="token punctuation">\\</span>ThunderSchemaExtensionPluginBase</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * My schema extension.</span>
<span class="line"> *</span>
<span class="line"> * @SchemaExtension(</span>
<span class="line"> *   id = &quot;myschema&quot;,</span>
<span class="line"> *   name = &quot;My schema extension&quot;,</span>
<span class="line"> *   description = &quot;Adds my schema.&quot;,</span>
<span class="line"> *   schema = &quot;thunder&quot;</span>
<span class="line"> * )</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name-definition class-name">MySchemaExtension</span> <span class="token keyword">extends</span> <span class="token class-name">ThunderSchemaExtensionPluginBase</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token doc-comment comment">/**</span>
<span class="line">   * <span class="token punctuation">{</span><span class="token keyword">@inheritdoc</span><span class="token punctuation">}</span></span>
<span class="line">   */</span></span>
<span class="line">  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">registerResolvers</span><span class="token punctuation">(</span><span class="token class-name type-declaration">ResolverRegistryInterface</span> <span class="token variable">$registry</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Call the parent resolver first.</span></span>
<span class="line">    <span class="token keyword static-context">parent</span><span class="token operator">::</span><span class="token function">registerResolvers</span><span class="token punctuation">(</span><span class="token variable">$registry</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// This adds all the Page interface fields to the resolver,</span></span>
<span class="line">    <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">resolvePageInterfaceFields</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;MyContentType&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;node&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Now we add field resolvers for our new fields. In this case we simply get</span></span>
<span class="line">    <span class="token comment">// the value from the field_mycustomfield. parent::registerResolvers($registry)</span></span>
<span class="line">    <span class="token comment">// stores $registry into the registry property, which we should use instead</span></span>
<span class="line">    <span class="token comment">// of $registry.</span></span>
<span class="line">    <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">registry</span><span class="token operator">-&gt;</span><span class="token function">addFieldResolver</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;MyContentType&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;mycustomfield&#39;</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">builder</span><span class="token operator">-&gt;</span><span class="token function">fromPath</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;entity&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;field_mycustomfield.value&#39;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That&#39;s it, most of it is boilerplate code, just the <code>$this-&gt;registry-&gt;addFieldResolver(&#39;MyContentType&#39;, &#39;mycustomfield&#39;,</code> part is necessary for your custom field. To learn more about producers and which are available out of the box, please read the <a href="https://drupal-graphql.gitbook.io/graphql/v/8.x-4.x/data-producers/producers" target="_blank" rel="noopener noreferrer">Drupal GraphQl module documentation</a>.</p><p>Similar extensions can be made for new media types and new paragraph types. The main difference is, that media and paragraph type names are prefixed with Media and Paragraph. If you have a custom paragraph called my_paragraph, the GraphQL type name would be ParagraphMyParagraph, and the media my_media would be called MediaMyMedia.</p><h3 id="extend-existing-types" tabindex="-1"><a class="header-anchor" href="#extend-existing-types"><span>Extend existing types</span></a></h3><p>Another common task is extending existing content types with new fields. When adding more fields to the article content type, you will have to add the producers for those fields.</p><p>This is very similar to creating a new type, but instead of using the myschema.base.graphqls file to declare your schema, you have to use the myschema.extension.graphqls file to extend the existing schema.</p><div class="language-graphql line-numbers-mode" data-highlighter="prismjs" data-ext="graphql"><pre><code class="language-graphql"><span class="line"><span class="token keyword">extend</span> <span class="token keyword">type</span> <span class="token class-name">Article</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token attr-name">hero</span><span class="token punctuation">:</span> <span class="token class-name">MediaImage</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This will add a new image field to the Article type. Similar to adding a new content type, we need to add the data producer for that field in our MySchemaSchemaExtension.php:</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php"><pre><code class="language-php"><span class="line"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span></span>
<span class="line"><span class="token keyword">namespace</span> <span class="token package">Drupal<span class="token punctuation">\\</span>myschema<span class="token punctuation">\\</span>Plugin<span class="token punctuation">\\</span>GraphQL<span class="token punctuation">\\</span>SchemaExtension</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">use</span> <span class="token package">Drupal<span class="token punctuation">\\</span>graphql<span class="token punctuation">\\</span>GraphQL<span class="token punctuation">\\</span>ResolverRegistryInterface</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">use</span> <span class="token package">Drupal<span class="token punctuation">\\</span>thunder_gqls<span class="token punctuation">\\</span>Plugin<span class="token punctuation">\\</span>GraphQL<span class="token punctuation">\\</span>SchemaExtension<span class="token punctuation">\\</span>ThunderSchemaExtensionPluginBase</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * My schema extension.</span>
<span class="line"> *</span>
<span class="line"> * @SchemaExtension(</span>
<span class="line"> *   id = &quot;myschema&quot;,</span>
<span class="line"> *   name = &quot;My schema extension&quot;,</span>
<span class="line"> *   description = &quot;Adds my schema.&quot;,</span>
<span class="line"> *   schema = &quot;thunder&quot;</span>
<span class="line"> * )</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name-definition class-name">MySchemaExtension</span> <span class="token keyword">extends</span> <span class="token class-name">ThunderSchemaExtensionPluginBase</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token doc-comment comment">/**</span>
<span class="line">   * <span class="token punctuation">{</span><span class="token keyword">@inheritdoc</span><span class="token punctuation">}</span></span>
<span class="line">   */</span></span>
<span class="line">  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">registerResolvers</span><span class="token punctuation">(</span><span class="token class-name type-declaration">ResolverRegistryInterface</span> <span class="token variable">$registry</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Call the parent resolver first.</span></span>
<span class="line">    <span class="token keyword static-context">parent</span><span class="token operator">::</span><span class="token function">registerResolvers</span><span class="token punctuation">(</span><span class="token variable">$registry</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// This adds all the Page interface fields to the resolver,</span></span>
<span class="line">    <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">resolvePageInterfaceFields</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;MyContentType&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Now we add field resolvers for our new fields. In this case we simply get</span></span>
<span class="line">    <span class="token comment">// the value from the field_mycustomfield. parent::registerResolvers($registry)</span></span>
<span class="line">    <span class="token comment">// stores $registry into the registry property, which we should use instead</span></span>
<span class="line">    <span class="token comment">// of $registry.</span></span>
<span class="line">    <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">registry</span><span class="token operator">-&gt;</span><span class="token function">addFieldResolver</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;MyContentType&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;myCustomField&#39;</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">builder</span><span class="token operator">-&gt;</span><span class="token function">fromPath</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;entity&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;field_mycustomfield.value&#39;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Extending the article</span></span>
<span class="line">    <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">registry</span><span class="token operator">-&gt;</span><span class="token function">addFieldResolver</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;Article&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;hero&#39;</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">builder</span><span class="token operator">-&gt;</span><span class="token function">fromPath</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;entity&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;field_hero.entity&#39;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="extend-existing-type-resolver" tabindex="-1"><a class="header-anchor" href="#extend-existing-type-resolver"><span>Extend existing type resolver</span></a></h3><p>We provide type resolvers for our interfaces. For example a page type resolver, that resolves entities to their bundle names. E.g. article nodes resolve to &#39;Article&#39; page type and tha channel taxonomy to &#39;Channel&#39; page type. If that automatic type resolver is not working for you, you can add your own type resolver and decorate it with our resolver as a fallback.</p><p>To do so add a resolver class similar to this:</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php"><pre><code class="language-php"><span class="line"></span>
<span class="line"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">namespace</span> <span class="token package">Drupal<span class="token punctuation">\\</span>myschema<span class="token punctuation">\\</span>GraphQL</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">use</span> <span class="token package">Drupal<span class="token punctuation">\\</span>node<span class="token punctuation">\\</span>NodeInterface</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">use</span> <span class="token package">Drupal<span class="token punctuation">\\</span>thunder_gqls<span class="token punctuation">\\</span>GraphQL<span class="token punctuation">\\</span>DecoratableTypeResolver</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">use</span> <span class="token package">Drupal<span class="token punctuation">\\</span>thunder_gqls<span class="token punctuation">\\</span>Traits<span class="token punctuation">\\</span>ResolverHelperTrait</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * Type resolver for Page interface.</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name-definition class-name">MyPagesTypeResolver</span> <span class="token keyword">extends</span> <span class="token class-name">DecoratableTypeResolver</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">use</span> <span class="token package">ResolverHelperTrait</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token doc-comment comment">/**</span>
<span class="line">   * <span class="token punctuation">{</span><span class="token keyword">@inheritdoc</span><span class="token punctuation">}</span></span>
<span class="line">   */</span></span>
<span class="line">  <span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function-definition function">resolve</span><span class="token punctuation">(</span><span class="token variable">$object</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token operator">?</span><span class="token keyword return-type">string</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// The bundle mytype is resolved to SpecialPage instead of Mytype.</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$object</span> <span class="token keyword">instanceof</span> <span class="token class-name">NodeInterface</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$object</span><span class="token operator">-&gt;</span><span class="token function">bundle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string single-quoted-string">&#39;mytype&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token string single-quoted-string">&#39;SpecialPage&#39;</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token comment">// In all other cases return NULL, so the next resolver in the chain is called.</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You can then add your resolver to the registry in your schema extension:</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php"><pre><code class="language-php"><span class="line"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span></span>
<span class="line"><span class="token keyword">namespace</span> <span class="token package">Drupal<span class="token punctuation">\\</span>myschema<span class="token punctuation">\\</span>Plugin<span class="token punctuation">\\</span>GraphQL<span class="token punctuation">\\</span>SchemaExtension</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">use</span> <span class="token package">Drupal<span class="token punctuation">\\</span>myschema<span class="token punctuation">\\</span>GraphQL<span class="token punctuation">\\</span>MyPagesTypeResolver</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">use</span> <span class="token package">Drupal<span class="token punctuation">\\</span>graphql<span class="token punctuation">\\</span>GraphQL<span class="token punctuation">\\</span>ResolverRegistryInterface</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">use</span> <span class="token package">Drupal<span class="token punctuation">\\</span>thunder_gqls<span class="token punctuation">\\</span>Plugin<span class="token punctuation">\\</span>GraphQL<span class="token punctuation">\\</span>SchemaExtension<span class="token punctuation">\\</span>ThunderSchemaExtensionPluginBase</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * My schema extension.</span>
<span class="line"> *</span>
<span class="line"> * @SchemaExtension(</span>
<span class="line"> *   id = &quot;myschema&quot;,</span>
<span class="line"> *   name = &quot;My schema extension&quot;,</span>
<span class="line"> *   description = &quot;Adds my schema.&quot;,</span>
<span class="line"> *   schema = &quot;thunder&quot;</span>
<span class="line"> * )</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name-definition class-name">MySchemaExtension</span> <span class="token keyword">extends</span> <span class="token class-name">ThunderSchemaExtensionPluginBase</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token doc-comment comment">/**</span>
<span class="line">   * <span class="token punctuation">{</span><span class="token keyword">@inheritdoc</span><span class="token punctuation">}</span></span>
<span class="line">   */</span></span>
<span class="line">  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">registerResolvers</span><span class="token punctuation">(</span><span class="token class-name type-declaration">ResolverRegistryInterface</span> <span class="token variable">$registry</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">void</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Call the parent resolver first.</span></span>
<span class="line">    <span class="token keyword static-context">parent</span><span class="token operator">::</span><span class="token function">registerResolvers</span><span class="token punctuation">(</span><span class="token variable">$registry</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Add your Page resolver to the registry, and provide existing type resolver as fallback.</span></span>
<span class="line">    <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">registry</span><span class="token operator">-&gt;</span><span class="token function">addTypeResolver</span><span class="token punctuation">(</span></span>
<span class="line">      <span class="token string single-quoted-string">&#39;Page&#39;</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token keyword">new</span> <span class="token class-name">MyPagesTypeResolver</span><span class="token punctuation">(</span><span class="token variable">$registry</span><span class="token operator">-&gt;</span><span class="token function">getTypeResolver</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;Page&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="create-entity-lists" tabindex="-1"><a class="header-anchor" href="#create-entity-lists"><span>Create entity lists</span></a></h4><p>We have a base class for entity lists, which can be used to create your own list definitions.</p><h3 id="change-existing-definitions" tabindex="-1"><a class="header-anchor" href="#change-existing-definitions"><span>Change existing definitions</span></a></h3><p>It is also possible to change existing resolvers. Field resolver and type resolver are simply overridable in your schema extension class.</p><h4 id="fields" tabindex="-1"><a class="header-anchor" href="#fields"><span>Fields</span></a></h4><p>Existing fields, where you would like to change the producer, e.g. to use a different Drupal field, are very easy: Just make your own definition in the MySchemaSchemaExtension.php. If you would like to change the Drupal field for the content field from field_paragraph to field_my_paragraph, you change the producer in your registerResolvers() method to something like this:</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php"><pre><code class="language-php"><span class="line">  <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">registry</span><span class="token operator">-&gt;</span><span class="token function">addFieldResolver</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;Article&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;content&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">builder</span><span class="token operator">-&gt;</span><span class="token function">produce</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;entity_reference_revisions&#39;</span><span class="token punctuation">)</span></span>
<span class="line">      <span class="token operator">-&gt;</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;entity&#39;</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">builder</span><span class="token operator">-&gt;</span><span class="token function">fromParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">      <span class="token operator">-&gt;</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;field&#39;</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">builder</span><span class="token operator">-&gt;</span><span class="token function">fromValue</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;field_my_paragraphs&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="thunder-entity-list-producer-and-entities-with-term-producer" tabindex="-1"><a class="header-anchor" href="#thunder-entity-list-producer-and-entities-with-term-producer"><span>Thunder entity list producer and entities with term producer</span></a></h5><p>The thunder_entity_list producer is a highly configurable producer to create lists of entities based on entity field queries. You can use it as a field producer for you custom fields. It can also be used as a base producer class for more specific producers. We include the entities_with_term as an example, which adds the ability to define a term depth ( similar to views) in your queries, when you want to have results for terms as well as their child terms, and presets specific query conditions, which simplifies the usage.</p><p>To use the producer for a field, you first have to define that field in your graphqls file. In this example we add a related articles field to the existing article type, so we have to add it to myschema.extension.graphqls.</p><div class="language-graphql line-numbers-mode" data-highlighter="prismjs" data-ext="graphql"><pre><code class="language-graphql"><span class="line"><span class="token keyword">extend</span> <span class="token keyword">type</span> <span class="token class-name">Article</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token attr-name">hero</span><span class="token punctuation">:</span> <span class="token class-name">MediaImage</span></span>
<span class="line">  <span class="token attr-name">promotedArticles</span><span class="token punctuation">(</span><span class="token attr-name">offset</span><span class="token punctuation">:</span> <span class="token scalar">Int</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token attr-name">limit</span><span class="token punctuation">:</span> <span class="token scalar">Int</span> <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token class-name">EntityList</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>As you can see in the example, it is possible to expose parameters to the GraphQL client. We recommend limiting the exposed parameters as much as possible, and not give too much control to the consumer, because generating lists can produce great load on the server, and you might expose data that you did not expect. Offset and limit should be fine. Any limit that will be set greater than 100 will not be accepted.</p><p>Back in the MySchemaSchemaExtension.php we can now use the thunder_entity_list producer to resolve that field.</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php"><pre><code class="language-php"><span class="line">  <span class="token comment">// Example for the thunder_entity_list list producer.</span></span>
<span class="line">  <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">registry</span><span class="token operator">-&gt;</span><span class="token function">addFieldResolver</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;Article&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;promotedArticles&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">builder</span><span class="token operator">-&gt;</span><span class="token function">produce</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;thunder_entity_list&#39;</span><span class="token punctuation">)</span></span>
<span class="line">      <span class="token operator">-&gt;</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;type&#39;</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">builder</span><span class="token operator">-&gt;</span><span class="token function">fromValue</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;node&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">      <span class="token operator">-&gt;</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;bundles&#39;</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">builder</span><span class="token operator">-&gt;</span><span class="token function">fromValue</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;article&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">      <span class="token operator">-&gt;</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;offset&#39;</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">builder</span><span class="token operator">-&gt;</span><span class="token function">fromArgument</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;offset&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">      <span class="token operator">-&gt;</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;limit&#39;</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">builder</span><span class="token operator">-&gt;</span><span class="token function">fromArgument</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;limit&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">      <span class="token operator">-&gt;</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;conditions&#39;</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">builder</span><span class="token operator">-&gt;</span><span class="token function">fromValue</span><span class="token punctuation">(</span><span class="token punctuation">[</span></span>
<span class="line">        <span class="token punctuation">[</span></span>
<span class="line">          <span class="token string single-quoted-string">&#39;field&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;promote&#39;</span><span class="token punctuation">,</span></span>
<span class="line">          <span class="token string single-quoted-string">&#39;value&#39;</span> <span class="token operator">=&gt;</span> <span class="token number">1</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">      <span class="token operator">-&gt;</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;sortBy&#39;</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">builder</span><span class="token operator">-&gt;</span><span class="token function">fromValue</span><span class="token punctuation">(</span><span class="token punctuation">[</span></span>
<span class="line">        <span class="token punctuation">[</span></span>
<span class="line">          <span class="token string single-quoted-string">&#39;field&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;created&#39;</span><span class="token punctuation">,</span></span>
<span class="line">          <span class="token string single-quoted-string">&#39;direction&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;DESC&#39;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>As you can see, you can give either set hard coded values for the producers parameters, or values from query arguments (offset and limit in this example). When you want to use context dependent parameters to the conditions, you would have to use either more query arguments (which could be bad), or implement your own data producer based on ThunderEntityListProducerBase. You can find an example in EntitiesWithTerm.php where we dynamically add term IDs to the query conditions.</p><h3 id="use-subrequest-data-producer" tabindex="-1"><a class="header-anchor" href="#use-subrequest-data-producer"><span>Use subrequest data producer</span></a></h3><p>Sometimes it&#39;s needed to execute a data producer in the context of an URL. Thunder uses this functionality for resolving the breadcrumb, JSON-LD structure or the entity language.</p><p>The <em>ThunderEntitySubRequestBase</em> is data producer base class that can be used for this use cases. See <em>ThunderBreadcrumb</em>, <em>ThunderJsonLd</em> or <em>ThunderLanguage</em> as an implementation example.</p><h2 id="supported-contrib-modules" tabindex="-1"><a class="header-anchor" href="#supported-contrib-modules"><span>Supported contrib modules</span></a></h2><h3 id="access-unpublished" tabindex="-1"><a class="header-anchor" href="#access-unpublished"><span>Access unpublished</span></a></h3><p>With the access unpublished module, you can hand out links to unpublished nodes to a person, that would usually not have the permission to view unpublished articles.</p><p>The module creates a temporary link with an arbitrary hash token. This hash has to be added to the query in the following way:</p><div class="language-graphql line-numbers-mode" data-highlighter="prismjs" data-ext="graphql"><pre><code class="language-graphql"><span class="line"><span class="token keyword">query</span><span class="token punctuation">(</span><span class="token variable">$path</span><span class="token punctuation">:</span> <span class="token scalar">String</span><span class="token operator">!</span> <span class="token variable">$auHash</span><span class="token punctuation">:</span> <span class="token scalar">String</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property-query">accessUnpublishedToken</span><span class="token punctuation">(</span><span class="token attr-name">auHash</span><span class="token punctuation">:</span> <span class="token variable">$auHash</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token property-query">page</span><span class="token punctuation">(</span><span class="token attr-name">path</span><span class="token punctuation">:</span> <span class="token variable">$path</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">name</span></span>
<span class="line">    <span class="token comment"># Add your fields</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The accessUnpublishedToken request has to be in the first line of the request.</p><h3 id="metatag-and-schema-metatag" tabindex="-1"><a class="header-anchor" href="#metatag-and-schema-metatag"><span>Metatag and Schema Metatag</span></a></h3><p>Data provided by the metatag and schema metatag (jsonld) modules is exposed by two similar calls and can be added to the page call in the following way:</p><div class="language-graphql line-numbers-mode" data-highlighter="prismjs" data-ext="graphql"><pre><code class="language-graphql"><span class="line"><span class="token keyword">query</span><span class="token punctuation">(</span><span class="token variable">$path</span><span class="token punctuation">:</span> <span class="token scalar">String</span><span class="token operator">!</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property-query">metatags</span><span class="token punctuation">(</span><span class="token attr-name">path</span><span class="token punctuation">:</span> <span class="token variable">$path</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">tag</span></span>
<span class="line">    <span class="token property">attributes</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token property-query">jsonld</span><span class="token punctuation">(</span><span class="token attr-name">path</span><span class="token punctuation">:</span> <span class="token variable">$path</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token property-query">page</span><span class="token punctuation">(</span><span class="token attr-name">path</span><span class="token punctuation">:</span> <span class="token variable">$path</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">name</span></span>
<span class="line">    <span class="token comment"># Add your fields</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The metatag query will return tag name, and the attributes as a json string. The jsonld query will return the jsonld string.</p>`,121)]))}const c=n(t,[["render",l]]),r=JSON.parse('{"path":"/developer-guide/headless.html","title":"Headless API","lang":"en-US","frontmatter":{},"git":{"updatedTime":1756376010000,"contributors":[{"name":"Christian Fritsch","username":"","email":"chr.fritsch@gmx.net","commits":1}],"changelog":[{"hash":"b1a88c056f75ff0c39bc08ab6a0f3ce30b144dfa","time":1756376010000,"email":"chr.fritsch@gmx.net","author":"Christian Fritsch","message":"Release Thunder 8.2.5"}]},"filePathRelative":"developer-guide/headless.md"}');export{c as comp,r as data};
