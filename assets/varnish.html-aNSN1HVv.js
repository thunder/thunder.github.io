import{_ as a,c as i,a as n,o as s}from"./app-BKU_geH9.js";const r={};function t(l,e){return s(),i("div",null,e[0]||(e[0]=[n(`<h1 id="tag-based-cache-invalidation-for-varnish" tabindex="-1"><a class="header-anchor" href="#tag-based-cache-invalidation-for-varnish"><span>Tag-based cache invalidation for Varnish</span></a></h1><p>This is a guide on how to set up Varnish to use effective cache invalidation. The idea behind it is that cache tags provided by Drupal are used to invalidate the cache (sometimes this action will be called &quot;purge&quot; in the following documentation). To achieve tag-based cache invalidation a few modules have to be installed and configured to work in combination with customized cache invalidation subroutines provided for Varnish.</p><h2 id="requirements" tabindex="-1"><a class="header-anchor" href="#requirements"><span>Requirements</span></a></h2><ol><li><a href="https://varnish-cache.org" target="_blank" rel="noopener noreferrer">Varnish service</a></li><li><a href="https://www.drupal.org/project/purge" target="_blank" rel="noopener noreferrer">Purge Drupal module</a></li></ol><h2 id="setup-varnish" tabindex="-1"><a class="header-anchor" href="#setup-varnish"><span>Setup Varnish</span></a></h2><p>To install Varnish on your platform you can follow the installation and configuration tutorial provided on <a href="https://www.varnish-software.com/wiki/content/tutorials/varnish/varnish_ubuntu.html" target="_blank" rel="noopener noreferrer">Varnish Wiki</a>. On the same Wiki site, you can find several helpful examples of <a href="https://www.varnish-software.com/wiki/content/tutorials/drupal/drupal_vcl.html" target="_blank" rel="noopener noreferrer">Varnish configurations relevant for Drupal</a> .</p><p>All code examples provided in this documentation should be placed in a Varnish script file. By default Varnish uses <code>/etc/varnish/default.vcl</code>, but on different platforms, the VCL script file can be placed in another location.</p><p>The first step is to set up Varnish to accept commands provided by the Purge module. At first, we will add the list of servers (IPs) that are allowed to do cache invalidation. Those are usually your Drupal servers. The reason for whitelisting Drupal servers is to avoid possible DOS attacks from public IP addresses. At the beginning of the Varnish script file the following code should be added:</p><div class="language-varnish line-numbers-mode" data-highlighter="prismjs" data-ext="varnish"><pre><code class="language-varnish"><span class="line"># Whitelist of Purger servers.</span>
<span class="line">acl whitelisted_purgers {</span>
<span class="line">    &quot;127.0.0.1&quot;;</span>
<span class="line">    # Add any other IP addresses that your Drupal runs on and that you</span>
<span class="line">    # want to allow cache invalidation requests from. For example:</span>
<span class="line">    # &quot;192.168.1.0&quot;/24;</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The provided example will whitelist only the localhost server to do invalidation of cache.</p><p>After that, we need to add a script that will actually handle cache invalidation. Following script code should be added in <code>vcl_recv</code> subroutine:</p><div class="language-varnish line-numbers-mode" data-highlighter="prismjs" data-ext="varnish"><pre><code class="language-varnish"><span class="line"># Only allow BAN requests from whitelisted IP addresses, listed in the &#39;whitelisted_purgers&#39; ACL.</span>
<span class="line">if (req.method == &quot;BAN&quot;) {</span>
<span class="line">  # Check is client IP whitelisted for cache invalidation.</span>
<span class="line">  if (!client.ip ~ whitelisted_purgers) {</span>
<span class="line">    return (synth(403, &quot;Not allowed.&quot;));</span>
<span class="line">  }</span>
<span class="line"></span>
<span class="line">  # Logic for the ban, using the Purge-Cache-Tags header. For more info</span>
<span class="line">  # see https://github.com/geerlingguy/drupal-vm/issues/397.</span>
<span class="line">  if (req.http.Purge-Cache-Tags) {</span>
<span class="line">    ban(&quot;obj.http.Purge-Cache-Tags ~ &quot; + req.http.Purge-Cache-Tags);</span>
<span class="line">  }</span>
<span class="line">  else {</span>
<span class="line">    return (synth(403, &quot;Purge-Cache-Tags header missing.&quot;));</span>
<span class="line">  }</span>
<span class="line"></span>
<span class="line">  # Throw a synthetic page so the request won&#39;t go to the backend.</span>
<span class="line">  return (synth(200, &quot;Ban added.&quot;));</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The following script will accept &quot;BAN&quot; commands from the Drupal Purge module and process them accordingly.</p><p>Since <code>Purge-Cache-Tags</code> header tends to be quite big, it would be wise to remove it from the response before it&#39;s sent to the user&#39;s browser. That can be achieved by adding following code in <code>vcl_deliver</code> subroutine:</p><div class="language-varnish line-numbers-mode" data-highlighter="prismjs" data-ext="varnish"><pre><code class="language-varnish"><span class="line">  # Purge&#39;s headers can become quite big, so they should be cleaned before the response is returned.</span>
<span class="line">  unset resp.http.Purge-Cache-Tags;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>After these changes, varnish can be restarted and it&#39;s ready to accept cache invalidation requests from the Drupal Purge module.</p><h2 id="install-drupal-purge-modules" tabindex="-1"><a class="header-anchor" href="#install-drupal-purge-modules"><span>Install Drupal Purge modules</span></a></h2><p>The purge module provides functionality to expose cache tags in the header of the response. Varnish by default will keep the header saved for every cache entry and that information will be used later to invalidate cache entries.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">composer</span> require drupal/purge drupal/purge_purger_http</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>After that enable following modules:</p><ul><li>Purge (purge) - base Purge module</li><li>Purge Tokens (purge_tokens) - required to replace generic cache tag tokens</li><li>Purge UI (purge_ui) - user interface for Purge configuration pages</li><li>Late runtime processor (purge_processor_lateruntime) - purge process, it will trigger cache invalidation on any core cache invalidation (fe. article save, media entity save, etc.)</li><li>Core tags queuer (purge_queuer_coretags) - provides queue core cache tag invalidation</li><li>Generic HTTP Purger (purge_purger_http) - makes BAN request, to execute cache invalidation for Varnish</li><li>Generic HTTP Tags Header (purge_purger_http_tagsheader) - exposes required header for Varnish</li></ul><p>To enable modules over drush, execute following command:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line">drush en purge, purge_tokens, purge_ui, purge_processor_lateruntime, purge_queuer_coretags, purge_purger_http, purge_purger_http_tagsheader</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>After these modules are enabled, Drupal should provide the <code>Purge-Cache-Tags</code> header. That header property contains all cache tags for the loaded page.</p><h2 id="setup-drupal-site-to-use-purge" tabindex="-1"><a class="header-anchor" href="#setup-drupal-site-to-use-purge"><span>Setup Drupal site to use Purge</span></a></h2><p>On the Drupal site open: Configuration -&gt; Development -&gt; Performance page (<code>admin/config/development/performance</code>). Enable caching and set it high, ideally max period (1 year). Save configuration and after that open Purge configuration page (<code>admin/config/development/performance/purge</code>).</p><p>On that page do the following configuration:</p><ol><li>Click &quot;Add Purger&quot;</li><li>Choose &quot;HTTP Bundled Purger&quot;</li><li>Click &quot;Add&quot;</li><li>HTTP Bundled Purger will be added with a generic name</li><li>Click the drop-down button and choose &quot;Configure&quot;</li><li>Set &quot;Name&quot; for Purger (e.g. Varnish Bundled HTTP Purger)</li><li>Adjust Hostname and Port to match your Varnish server</li><li>Click &quot;Headers&quot;</li><li>Create Header - Name: <code>Purge-Cache-Tags</code> - Value: <code>[invalidations:separated_pipe]</code></li><li>Click &quot;Save Configuration&quot;</li></ol><p>With this created Purger for Varnish, everything should work.</p><h2 id="steps-of-integration-on-a-live-system-with-existing-varnish" tabindex="-1"><a class="header-anchor" href="#steps-of-integration-on-a-live-system-with-existing-varnish"><span>Steps of integration on a live system with existing Varnish</span></a></h2><p>On live system integration can be done in the following order:</p><ol><li>Modify the existing Varnish script and reload it without losing currently cached pages. Here is a guide <a href="https://ma.ttias.be/reload-varnish-vcl-without-losing-cache-data" target="_blank" rel="noopener noreferrer">how to reload it</a>.</li><li>Install Purge modules and enable them (after this step Varnish will receive requests with <code>Purge-Cache-Tags</code> header and collect them).</li><li>Add purger for tag-based cache invalidation as it&#39;s explained in the documentation.</li><li>The last step should be to increase caching time to maximum (already cached pages will be invalidated over time and tag-based cache invalidation will take over).</li></ol><h2 id="clearing-and-rebuilding-of-cache" tabindex="-1"><a class="header-anchor" href="#clearing-and-rebuilding-of-cache"><span>Clearing and rebuilding of cache</span></a></h2><p>If you want to clear all cache on your site and rebuild it, the most common way is to use <code>drush cache-rebuild</code> command, but currently, that command will not trigger Purger, and Varnish will still keep old cached pages. If you clear cache over the user interface in administration page: Configuration -&gt; Development -&gt; Performance (<code>admin/config/development/performance</code>), then also Varnish cache will be properly invalidated. To use <code>drush</code> command for Varnish cache invalidation, one additional module has to be installed:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line">drush en purge_drush</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>After that it&#39;s possible to use the following combination of commands to clear all cache in Drupal site and Varnish:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line">drush cache-rebuild</span>
<span class="line"></span>
<span class="line">drush p-invalidate tag <span class="token string">&#39;.+&#39;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,37)]))}const d=a(r,[["render",t]]),c=JSON.parse('{"path":"/developer-guide/operating/varnish.html","title":"Tag-based cache invalidation for Varnish","lang":"en-US","frontmatter":{},"git":{"updatedTime":1756376010000,"contributors":[{"name":"Christian Fritsch","username":"","email":"chr.fritsch@gmx.net","commits":1}],"changelog":[{"hash":"b1a88c056f75ff0c39bc08ab6a0f3ce30b144dfa","time":1756376010000,"email":"chr.fritsch@gmx.net","author":"Christian Fritsch","message":"Release Thunder 8.2.5"}]},"filePathRelative":"developer-guide/operating/varnish.md"}');export{d as comp,c as data};
